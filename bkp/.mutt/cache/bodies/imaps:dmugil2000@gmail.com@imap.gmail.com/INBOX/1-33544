Delivered-To: dmugil2000@gmail.com
Received: by 2002:a05:6a10:d597:0:0:0:0 with SMTP id gn23csp3166398pxb;
        Mon, 9 Aug 2021 13:03:00 -0700 (PDT)
X-Google-Smtp-Source: ABdhPJw792Pc9ZtNMz6T10Mp3pOQvhvUQrjz3R3UBKNe3AXRpVFeLCfk/PDMM9/xA/JcR8129N9m
X-Received: by 2002:a17:90a:b303:: with SMTP id d3mr27334914pjr.199.1628539380738;
        Mon, 09 Aug 2021 13:03:00 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; t=1628539380; cv=none;
        d=google.com; s=arc-20160816;
        b=aCLN+s6QpOzD9mNknI88a0a310tEzZy0b/x78QFSdzkehix5vfvGN2mMeHoqy0GE+l
         L9RgrVcYZfxg+Jk+K1jBn4bk6MZmM3vFdugwWbUXHoH51FEEqsPq8uBmCYfyKyykP3Rm
         vlThuAFi7nTFB54a+4McR0t8F4IzHi4Ed1CV0smTT8qh5csFAz1LWy8on4jax0Ae+xM5
         rcL+kKk6Pj74k9U9h80SnICwU+QlCY7QpOefKqsb0hp6VAnSIODTX2txWf91P3/MsOdK
         EEmP1wTGIJ3/XJIie9Fk7+GLrVOiGZQw5+g8xQVOfvkbMCu4eE5Ze6GtMqvvRzMTRKCy
         KmoA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=content-transfer-encoding:mime-version:references:in-reply-to
         :message-id:subject:cc:to:from:date;
        bh=qMSZ1ZCbKIzKM5u1JNK/Scv6HEfY8au8I993ZejjfUg=;
        b=Ui8pka0NQcmDHdqvqbBEiVNYqbTqbJ5MWPuGnk37So6jNlUOVtKAbdXJwd5re9X/WR
         dkLJMSM1qoab1DFwD91rpJ99Hr8nxLk6NslYxyM45KgHvCopwoMVbVTsk/XIK7zRwZxY
         C+9NCakIRTZl/UKZG0A9/cjHkjeltjeMInca5U6ic3QChRoNHvMWN6XzCZsQZCyI3hHO
         q9t6MoWkHInM2/N/u/s6wd1TNXXTyISgfS+R2iKfTpZx0tVghMCQqq1tAWj5XyE9L2r7
         jxfukw1xh2VsrXSVWzqpTZPKEmUN/cOIBVde7eg+tkMN8sbCgYaXbq0jTk78fFVgRaUa
         hJLw==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: domain of jic23@kernel.org designates 198.145.29.99 as permitted sender) smtp.mailfrom=jic23@kernel.org;
       dmarc=pass (p=NONE sp=NONE dis=NONE) header.from=kernel.org
Return-Path: <jic23@kernel.org>
Received: from mail.kernel.org (mail.kernel.org. [198.145.29.99])
        by mx.google.com with ESMTPS id u8si15619245plg.341.2021.08.09.13.03.00
        for <dmugil2000@gmail.com>
        (version=TLS1_2 cipher=ECDHE-ECDSA-AES128-GCM-SHA256 bits=128/128);
        Mon, 09 Aug 2021 13:03:00 -0700 (PDT)
Received-SPF: pass (google.com: domain of jic23@kernel.org designates 198.145.29.99 as permitted sender) client-ip=198.145.29.99;
Authentication-Results: mx.google.com;
       spf=pass (google.com: domain of jic23@kernel.org designates 198.145.29.99 as permitted sender) smtp.mailfrom=jic23@kernel.org;
       dmarc=pass (p=NONE sp=NONE dis=NONE) header.from=kernel.org
Received: from jic23-huawei (cpc108967-cmbg20-2-0-cust86.5-4.cable.virginm.net [81.101.6.87])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by mail.kernel.org (Postfix) with ESMTPSA id 6F8F661004;
	Mon,  9 Aug 2021 20:02:56 +0000 (UTC)
Date: Mon, 9 Aug 2021 21:05:47 +0100
From: Jonathan Cameron <jic23@kernel.org>
To: Mugilraj Dhavachelvan <dmugil2000@gmail.com>
Cc: Dragos.Bogdan@analog.com, Darius.Berghe@analog.com, Rob Herring
 <robh+dt@kernel.org>, Lars-Peter Clausen <lars@metafoo.de>, Michael
 Hennerich <Michael.Hennerich@analog.com>, Guenter Roeck
 <linux@roeck-us.net>, Chris Packham <chris.packham@alliedtelesis.co.nz>,
 Slawomir Stepien <sst@poczta.fm>, Krzysztof Kozlowski <krzk@kernel.org>,
 Alexandre Belloni <alexandre.belloni@bootlin.com>, Alexandru Ardelean
 <alexandru.ardelean@analog.com>, devicetree@vger.kernel.org,
 linux-kernel@vger.kernel.org, linux-iio@vger.kernel.org
Subject: Re: [PATCH v2 2/2] iio: potentiometer: Add driver support for
 AD5110
Message-ID: <20210809210547.283e843e@jic23-huawei>
In-Reply-To: <20210809075745.160042-3-dmugil2000@gmail.com>
References: <20210809075745.160042-1-dmugil2000@gmail.com>
	<20210809075745.160042-3-dmugil2000@gmail.com>
X-Mailer: Claws Mail 4.0.0 (GTK+ 3.24.30; x86_64-pc-linux-gnu)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

On Mon,  9 Aug 2021 13:27:20 +0530
Mugilraj Dhavachelvan <dmugil2000@gmail.com> wrote:

> The AD5110/AD5112/AD5114 provide a nonvolatile solution
> for 128-/64-/32-position adjustment applications, offering
> guaranteed low resistor tolerance errors of =C2=B18% and up to
> =C2=B16 mA current density.
>=20
> Datasheet: https://www.analog.com/media/en/technical-documentation/data-s=
heets/AD5110_5112_5114.pdf
> Signed-off-by: Mugilraj Dhavachelvan <dmugil2000@gmail.com>

Looks good to me, but I'll leave it on the list for a little
while to give time for others to take another look.

Thanks,

Jonathan
> ---
>  MAINTAINERS                        |   6 +
>  drivers/iio/potentiometer/Kconfig  |  10 +
>  drivers/iio/potentiometer/Makefile |   1 +
>  drivers/iio/potentiometer/ad5110.c | 339 +++++++++++++++++++++++++++++
>  4 files changed, 356 insertions(+)
>  create mode 100644 drivers/iio/potentiometer/ad5110.c
>=20
> diff --git a/MAINTAINERS b/MAINTAINERS
> index bd7aff0c120f..cf6e73b87b6e 100644
> --- a/MAINTAINERS
> +++ b/MAINTAINERS
> @@ -452,6 +452,12 @@ S:	Maintained
>  W:	https://parisc.wiki.kernel.org/index.php/AD1889
>  F:	sound/pci/ad1889.*
> =20
> +AD5110 ANALOG DEVICES DIGITAL POTENTIOMETERS DRIVER
> +M:	Mugilraj Dhavachelvan <dmugil2000@gmail.com>
> +L:	linux-iio@vger.kernel.org
> +S:	Supported
> +F:	drivers/iio/potentiometer/ad5110.c
> +
>  AD525X ANALOG DEVICES DIGITAL POTENTIOMETERS DRIVER
>  M:	Michael Hennerich <michael.hennerich@analog.com>
>  S:	Supported
> diff --git a/drivers/iio/potentiometer/Kconfig b/drivers/iio/potentiomete=
r/Kconfig
> index 4cac0173db8b..832df8da2bc6 100644
> --- a/drivers/iio/potentiometer/Kconfig
> +++ b/drivers/iio/potentiometer/Kconfig
> @@ -6,6 +6,16 @@
> =20
>  menu "Digital potentiometers"
> =20
> +config AD5110
> +	tristate "Analog Devices AD5110 and similar Digital Potentiometer drive=
r"
> +	depends on I2C
> +	help
> +	  Say yes here to build support for the Analog Devices AD5110, AD5112=20
> +	  and AD5114 digital potentiometer chip.
> +
> +	  To compile this driver as a module, choose M here: the
> +	  module will be called ad5110.
> +
>  config AD5272
>  	tristate "Analog Devices AD5272 and similar Digital Potentiometer drive=
r"
>  	depends on I2C
> diff --git a/drivers/iio/potentiometer/Makefile b/drivers/iio/potentiomet=
er/Makefile
> index 091adf3cdd0b..5ebb8e3bbd76 100644
> --- a/drivers/iio/potentiometer/Makefile
> +++ b/drivers/iio/potentiometer/Makefile
> @@ -4,6 +4,7 @@
>  #
> =20
>  # When adding new entries keep the list in alphabetical order
> +obj-$(CONFIG_AD5110) +=3D ad5110.o
>  obj-$(CONFIG_AD5272) +=3D ad5272.o
>  obj-$(CONFIG_DS1803) +=3D ds1803.o
>  obj-$(CONFIG_MAX5432) +=3D max5432.o
> diff --git a/drivers/iio/potentiometer/ad5110.c b/drivers/iio/potentiomet=
er/ad5110.c
> new file mode 100644
> index 000000000000..4ba76e968edb
> --- /dev/null
> +++ b/drivers/iio/potentiometer/ad5110.c
> @@ -0,0 +1,339 @@
> +// SPDX-License-Identifier: GPL-2.0+
> +/*
> + * Analog Devices AD5110 digital potentiometer driver
> + *
> + * Copyright (C) 2021 Mugilraj Dhavachelvan <dmugil2000@gmail.com>
> + *
> + * Datasheet: https://www.analog.com/media/en/technical-documentation/da=
ta-sheets/AD5110_5112_5114.pdf
> + *
> + */
> +
> +#include <linux/bitfield.h>
> +#include <linux/delay.h>
> +#include <linux/device.h>
> +#include <linux/i2c.h>
> +#include <linux/module.h>
> +
> +#include <linux/iio/iio.h>
> +#include <linux/iio/sysfs.h>
> +
> +/* AD5110 commands */
> +#define AD5110_EEPROM_WR	1
> +#define AD5110_RDAC_WR		2
> +#define AD5110_SHUTDOWN	3
> +#define AD5110_RESET		4
> +#define AD5110_RDAC_RD		5
> +#define AD5110_EEPROM_RD	6
> +
> +/* AD5110_EEPROM_RD data */
> +#define AD5110_WIPER_POS	0
> +#define AD5110_RESISTOR_TOL	1
> +
> +#define WIPER_RESISTANCE	70
> +
> +struct ad5110_cfg {
> +	int max_pos;
> +	int kohms;
> +	int shift;
> +};
> +
> +enum ad5110_type {
> +	AD5110_10,
> +	AD5110_80,
> +	AD5112_05,
> +	AD5112_10,
> +	AD5112_80,
> +	AD5114_10,
> +	AD5114_80,
> +};
> +
> +static const struct ad5110_cfg ad5110_cfg[] =3D {
> +	[AD5110_10] =3D { .max_pos =3D 128, .kohms =3D 10 },
> +	[AD5110_80] =3D { .max_pos =3D 128, .kohms =3D 80 },
> +	[AD5112_05] =3D { .max_pos =3D 64, .kohms =3D 5, .shift =3D 1 },
> +	[AD5112_10] =3D { .max_pos =3D 64, .kohms =3D 10, .shift =3D 1 },
> +	[AD5112_80] =3D { .max_pos =3D 64, .kohms =3D 80, .shift =3D 1 },
> +	[AD5114_10] =3D { .max_pos =3D 32, .kohms =3D 10, .shift =3D 2 },
> +	[AD5114_80] =3D { .max_pos =3D 32, .kohms =3D 80, .shift =3D 2 },
> +};
> +
> +struct ad5110_data {
> +	struct i2c_client       *client;
> +	s16			tol;		/* resistor tolerance */
> +	bool			enable;
> +	struct mutex            lock;
> +	const struct ad5110_cfg	*cfg;
> +	/*
> +	 * DMA (thus cache coherency maintenance) requires the
> +	 * transfer buffers to live in their own cache lines.
> +	 */
> +	u8			buf[2] ____cacheline_aligned;
> +};
> +
> +static const struct iio_chan_spec ad5110_channels[] =3D {
> +	{
> +		.type =3D IIO_RESISTANCE,
> +		.output =3D 1,
> +		.info_mask_separate =3D BIT(IIO_CHAN_INFO_RAW) | BIT(IIO_CHAN_INFO_OFF=
SET) |
> +					BIT(IIO_CHAN_INFO_SCALE) | BIT(IIO_CHAN_INFO_ENABLE),
> +	}
> +};
> +
> +static int ad5110_read(struct ad5110_data *data, u8 cmd, int *val)
> +{
> +	int ret;
> +
> +	mutex_lock(&data->lock);
> +	data->buf[0] =3D cmd;
> +	data->buf[1] =3D *val;
> +
> +	ret =3D i2c_master_send_dmasafe(data->client, data->buf, sizeof(data->b=
uf));
> +	if (ret !=3D sizeof(data->buf)) {
> +		ret =3D -EIO;
> +		goto error;
> +	}
> +
> +	ret =3D i2c_master_recv_dmasafe(data->client, data->buf, 1);
> +	if (ret !=3D 1) {
> +		ret =3D -EIO;
> +		goto error;
> +	}
> +
> +	*val =3D data->buf[0];
> +	ret =3D 0;
> +
> +error:
> +	mutex_unlock(&data->lock);
> +	return ret;
> +}
> +
> +static int ad5110_write(struct ad5110_data *data, u8 cmd, u8 val)
> +{
> +	int ret;
> +
> +	mutex_lock(&data->lock);
> +	data->buf[0] =3D cmd;
> +	data->buf[1] =3D val;
> +
> +	ret =3D i2c_master_send_dmasafe(data->client, data->buf, sizeof(data->b=
uf));
> +	if (ret !=3D sizeof(data->buf))
> +		ret =3D -EIO;
> +
> +	mutex_unlock(&data->lock);
> +
> +	return ret < 0 ? ret : 0;
> +}
> +
> +static int ad5110_resistor_tol(struct ad5110_data *data, u8 cmd, int val)
> +{
> +	int ret;
> +
> +	ret =3D ad5110_read(data, cmd, &val);
> +	if (ret)
> +		return ret;
> +
> +	data->tol =3D data->cfg->kohms * (val & GENMASK(6, 0)) * 10 / 8;
> +	if (!(val & BIT(7)))
> +		data->tol *=3D -1;
> +
> +	return 0;
> +}
> +
> +static ssize_t ad5110_eeprom_read(struct device *dev,
> +				  struct device_attribute *attr,
> +				  char *buf)
> +{
> +	struct iio_dev *indio_dev =3D dev_to_iio_dev(dev);
> +	struct ad5110_data *data =3D iio_priv(indio_dev);
> +	int val =3D AD5110_WIPER_POS;
> +	int ret;
> +
> +	ret =3D ad5110_read(data, AD5110_EEPROM_RD, &val);
> +	if (ret)
> +		return ret;
> +
> +	val =3D val >> data->cfg->shift;
> +	return iio_format_value(buf, IIO_VAL_INT, 1, &val);
> +}
> +
> +static ssize_t ad5110_eeprom_write(struct device *dev,
> +				   struct device_attribute *attr,
> +				   const char *buf, size_t len)
> +{
> +	struct iio_dev *indio_dev =3D dev_to_iio_dev(dev);
> +	struct ad5110_data *data =3D iio_priv(indio_dev);
> +	int ret;
> +
> +	ret =3D ad5110_write(data, AD5110_EEPROM_WR, 0);
> +	if (ret) {
> +		dev_err(&data->client->dev, "RDAC to EEPROM write failed\n");
> +		return ret;
> +	}
> +	msleep(20);
> +
> +	return len;
> +}
> +
> +static IIO_DEVICE_ATTR(store_eeprom, 0644,
> +		       ad5110_eeprom_read,
> +		       ad5110_eeprom_write, 0);
> +
> +static struct attribute *ad5110_attributes[] =3D {
> +	&iio_dev_attr_store_eeprom.dev_attr.attr,
> +	NULL,
> +};
> +
> +static const struct attribute_group ad5110_attribute_group =3D {
> +	.attrs =3D ad5110_attributes,
> +};
> +
> +static int ad5110_read_raw(struct iio_dev *indio_dev,
> +			   struct iio_chan_spec const *chan,
> +			   int *val, int *val2, long mask)
> +{
> +	struct ad5110_data *data =3D iio_priv(indio_dev);
> +	int ret;
> +
> +	switch (mask) {
> +	case IIO_CHAN_INFO_RAW:
> +		ret =3D ad5110_read(data, AD5110_RDAC_RD, val);
> +		if (ret)
> +			return ret;
> +
> +		*val =3D *val >> data->cfg->shift;
> +		return IIO_VAL_INT;
> +	case IIO_CHAN_INFO_OFFSET:
> +		*val =3D WIPER_RESISTANCE * data->cfg->max_pos;
> +		*val2 =3D 1000 * data->cfg->kohms + data->tol;
> +		return IIO_VAL_FRACTIONAL;
> +	case IIO_CHAN_INFO_SCALE:
> +		*val =3D 1000 * data->cfg->kohms + data->tol;
> +		*val2 =3D data->cfg->max_pos;
> +		return IIO_VAL_FRACTIONAL;
> +	case IIO_CHAN_INFO_ENABLE:
> +		*val =3D data->enable;
> +		return IIO_VAL_INT;
> +	default:
> +		return -EINVAL;
> +	}
> +}
> +
> +static int ad5110_write_raw(struct iio_dev *indio_dev,
> +			    struct iio_chan_spec const *chan,
> +			    int val, int val2, long mask)
> +{
> +	struct ad5110_data *data =3D iio_priv(indio_dev);
> +	int ret;
> +
> +	switch (mask) {
> +	case IIO_CHAN_INFO_RAW:
> +		if (val > data->cfg->max_pos || val < 0)
> +			return -EINVAL;
> +
> +		return ad5110_write(data, AD5110_RDAC_WR, val << data->cfg->shift);
> +	case IIO_CHAN_INFO_ENABLE:
> +		if (val < 0 || val > 1)
> +			return -EINVAL;
> +		if (data->enable =3D=3D val)
> +			return 0;
> +		ret =3D ad5110_write(data, AD5110_SHUTDOWN, val ? 0 : 1);
> +		if (ret)
> +			return ret;
> +		data->enable =3D val;
> +		return 0;
> +	default:
> +		return -EINVAL;
> +	}
> +}
> +
> +static const struct iio_info ad5110_info =3D {
> +	.read_raw =3D ad5110_read_raw,
> +	.write_raw =3D ad5110_write_raw,
> +	.attrs =3D &ad5110_attribute_group,
> +};
> +
> +#define AD5110_COMPATIBLE(of_compatible, cfg) {	\
> +			.compatible =3D of_compatible,	\
> +			.data =3D &ad5110_cfg[cfg],	\
> +}
> +
> +static const struct of_device_id ad5110_of_match[] =3D {
> +	AD5110_COMPATIBLE("adi,ad5110-10", AD5110_10),
> +	AD5110_COMPATIBLE("adi,ad5110-80", AD5110_80),
> +	AD5110_COMPATIBLE("adi,ad5112-05", AD5112_05),
> +	AD5110_COMPATIBLE("adi,ad5112-10", AD5112_10),
> +	AD5110_COMPATIBLE("adi,ad5112-80", AD5112_80),
> +	AD5110_COMPATIBLE("adi,ad5114-10", AD5114_10),
> +	AD5110_COMPATIBLE("adi,ad5114-80", AD5114_80),
> +	{ }
> +};
> +MODULE_DEVICE_TABLE(of, ad5110_of_match);
> +
> +static const struct i2c_device_id ad5110_id[] =3D {
> +	{ "ad5110-10", AD5110_10 },
> +	{ "ad5110-80", AD5110_80 },
> +	{ "ad5112-05", AD5112_05 },
> +	{ "ad5112-10", AD5112_10 },
> +	{ "ad5112-80", AD5112_80 },
> +	{ "ad5114-10", AD5114_10 },
> +	{ "ad5114-80", AD5114_80 },
> +	{ }
> +};
> +MODULE_DEVICE_TABLE(i2c, ad5110_id);
> +
> +static int ad5110_probe(struct i2c_client *client)
> +{
> +	struct device *dev =3D &client->dev;
> +	struct iio_dev *indio_dev;
> +	struct ad5110_data *data;
> +	int ret;
> +
> +	indio_dev =3D devm_iio_device_alloc(dev, sizeof(*data));
> +	if (!indio_dev)
> +		return -ENOMEM;
> +
> +	data =3D iio_priv(indio_dev);
> +	data->client =3D client;
> +	mutex_init(&data->lock);
> +	data->enable =3D 1;
> +	data->cfg =3D device_get_match_data(dev);
> +	if (!data->cfg)
> +		data->cfg =3D &ad5110_cfg[i2c_match_id(ad5110_id, client)->driver_data=
];
> +
> +	/* refresh RDAC register with EEPROM */
> +	ret =3D ad5110_write(data, AD5110_RESET, 0);
> +	if (ret) {
> +		dev_err(dev, "Refresh RDAC with EEPROM failed\n");
> +		return ret;
> +	}
> +
> +	ret =3D ad5110_resistor_tol(data, AD5110_EEPROM_RD, AD5110_RESISTOR_TOL=
);
> +	if (ret) {
> +		dev_err(dev, "Read resistor tolerance failed\n");
> +		return ret;
> +	}
> +
> +	indio_dev->modes =3D INDIO_DIRECT_MODE;
> +	indio_dev->info =3D &ad5110_info;
> +	indio_dev->channels =3D ad5110_channels;
> +	indio_dev->num_channels =3D ARRAY_SIZE(ad5110_channels);
> +	indio_dev->name =3D client->name;
> +
> +	return devm_iio_device_register(dev, indio_dev);
> +}
> +
> +static struct i2c_driver ad5110_driver =3D {
> +	.driver =3D {
> +		.name	=3D "ad5110",
> +		.of_match_table =3D ad5110_of_match,
> +	},
> +	.probe_new	=3D ad5110_probe,
> +	.id_table	=3D ad5110_id,
> +};
> +
> +module_i2c_driver(ad5110_driver);
> +
> +MODULE_AUTHOR("Mugilraj Dhavachelvan <dmugil2000@gmail.com>");
> +MODULE_DESCRIPTION("AD5110 digital potentiometer");
> +MODULE_LICENSE("GPL v2");
> +

